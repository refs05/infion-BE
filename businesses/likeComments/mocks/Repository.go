// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	likeComments "infion-BE/businesses/likeComments"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, likeCommentsDomain
func (_m *Repository) Delete(ctx context.Context, likeCommentsDomain *likeComments.Domain) (likeComments.Domain, error) {
	ret := _m.Called(ctx, likeCommentsDomain)

	var r0 likeComments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeComments.Domain) likeComments.Domain); ok {
		r0 = rf(ctx, likeCommentsDomain)
	} else {
		r0 = ret.Get(0).(likeComments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeComments.Domain) error); ok {
		r1 = rf(ctx, likeCommentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, likeCommentsId
func (_m *Repository) GetByID(ctx context.Context, likeCommentsId int) (likeComments.Domain, error) {
	ret := _m.Called(ctx, likeCommentsId)

	var r0 likeComments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) likeComments.Domain); ok {
		r0 = rf(ctx, likeCommentsId)
	} else {
		r0 = ret.Get(0).(likeComments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, likeCommentsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, likeCommentsDomain
func (_m *Repository) Store(ctx context.Context, likeCommentsDomain *likeComments.Domain) (likeComments.Domain, error) {
	ret := _m.Called(ctx, likeCommentsDomain)

	var r0 likeComments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeComments.Domain) likeComments.Domain); ok {
		r0 = rf(ctx, likeCommentsDomain)
	} else {
		r0 = ret.Get(0).(likeComments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeComments.Domain) error); ok {
		r1 = rf(ctx, likeCommentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, likeCommentsDomain
func (_m *Repository) Update(ctx context.Context, likeCommentsDomain *likeComments.Domain) (likeComments.Domain, error) {
	ret := _m.Called(ctx, likeCommentsDomain)

	var r0 likeComments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeComments.Domain) likeComments.Domain); ok {
		r0 = rf(ctx, likeCommentsDomain)
	} else {
		r0 = ret.Get(0).(likeComments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeComments.Domain) error); ok {
		r1 = rf(ctx, likeCommentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
