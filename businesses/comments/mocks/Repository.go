// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	comments "infion-BE/businesses/comments"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, commentsDomain
func (_m *Repository) Delete(ctx context.Context, commentsDomain *comments.Domain) (comments.Domain, error) {
	ret := _m.Called(ctx, commentsDomain)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *comments.Domain) comments.Domain); ok {
		r0 = rf(ctx, commentsDomain)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *comments.Domain) error); ok {
		r1 = rf(ctx, commentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, commentsId
func (_m *Repository) GetByID(ctx context.Context, commentsId int) (comments.Domain, error) {
	ret := _m.Called(ctx, commentsId)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) comments.Domain); ok {
		r0 = rf(ctx, commentsId)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, commentsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: ctx
func (_m *Repository) GetComments(ctx context.Context) ([]comments.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []comments.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByThreadID provides a mock function with given fields: ctx, threadId
func (_m *Repository) GetCommentsByThreadID(ctx context.Context, threadId int) ([]comments.Domain, error) {
	ret := _m.Called(ctx, threadId)

	var r0 []comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []comments.Domain); ok {
		r0 = rf(ctx, threadId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comments.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, threadId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, commentsDomain
func (_m *Repository) Store(ctx context.Context, commentsDomain *comments.Domain) (comments.Domain, error) {
	ret := _m.Called(ctx, commentsDomain)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *comments.Domain) comments.Domain); ok {
		r0 = rf(ctx, commentsDomain)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *comments.Domain) error); ok {
		r1 = rf(ctx, commentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, commentsDomain
func (_m *Repository) Update(ctx context.Context, commentsDomain *comments.Domain) (comments.Domain, error) {
	ret := _m.Called(ctx, commentsDomain)

	var r0 comments.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *comments.Domain) comments.Domain); ok {
		r0 = rf(ctx, commentsDomain)
	} else {
		r0 = ret.Get(0).(comments.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *comments.Domain) error); ok {
		r1 = rf(ctx, commentsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
