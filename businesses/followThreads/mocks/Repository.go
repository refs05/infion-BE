// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	followThreads "infion-BE/businesses/followThreads"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountByThreadID provides a mock function with given fields: ctx, id
func (_m *Repository) CountByThreadID(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountByUserID provides a mock function with given fields: ctx, id
func (_m *Repository) CountByUserID(ctx context.Context, id uint) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, uint) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, followThreadsDomain
func (_m *Repository) Delete(ctx context.Context, followThreadsDomain *followThreads.Domain) (followThreads.Domain, error) {
	ret := _m.Called(ctx, followThreadsDomain)

	var r0 followThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *followThreads.Domain) followThreads.Domain); ok {
		r0 = rf(ctx, followThreadsDomain)
	} else {
		r0 = ret.Get(0).(followThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *followThreads.Domain) error); ok {
		r1 = rf(ctx, followThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, followThreadsId
func (_m *Repository) GetByID(ctx context.Context, followThreadsId int) (followThreads.Domain, error) {
	ret := _m.Called(ctx, followThreadsId)

	var r0 followThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) followThreads.Domain); ok {
		r0 = rf(ctx, followThreadsId)
	} else {
		r0 = ret.Get(0).(followThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, followThreadsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, followThreadsDomain
func (_m *Repository) Store(ctx context.Context, followThreadsDomain *followThreads.Domain) (followThreads.Domain, error) {
	ret := _m.Called(ctx, followThreadsDomain)

	var r0 followThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *followThreads.Domain) followThreads.Domain); ok {
		r0 = rf(ctx, followThreadsDomain)
	} else {
		r0 = ret.Get(0).(followThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *followThreads.Domain) error); ok {
		r1 = rf(ctx, followThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, followThreadsDomain
func (_m *Repository) Update(ctx context.Context, followThreadsDomain *followThreads.Domain) (followThreads.Domain, error) {
	ret := _m.Called(ctx, followThreadsDomain)

	var r0 followThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *followThreads.Domain) followThreads.Domain); ok {
		r0 = rf(ctx, followThreadsDomain)
	} else {
		r0 = ret.Get(0).(followThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *followThreads.Domain) error); ok {
		r1 = rf(ctx, followThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
