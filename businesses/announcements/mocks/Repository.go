// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	announcements "infion-BE/businesses/announcements"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, announcementsDomain
func (_m *Repository) Delete(ctx context.Context, announcementsDomain *announcements.Domain) (announcements.Domain, error) {
	ret := _m.Called(ctx, announcementsDomain)

	var r0 announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *announcements.Domain) announcements.Domain); ok {
		r0 = rf(ctx, announcementsDomain)
	} else {
		r0 = ret.Get(0).(announcements.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *announcements.Domain) error); ok {
		r1 = rf(ctx, announcementsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncements provides a mock function with given fields: ctx
func (_m *Repository) GetAnnouncements(ctx context.Context) ([]announcements.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []announcements.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]announcements.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncementsByUserID provides a mock function with given fields: ctx, userID
func (_m *Repository) GetAnnouncementsByUserID(ctx context.Context, userID int) ([]announcements.Domain, error) {
	ret := _m.Called(ctx, userID)

	var r0 []announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []announcements.Domain); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]announcements.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, announcementsId
func (_m *Repository) GetByID(ctx context.Context, announcementsId int) (announcements.Domain, error) {
	ret := _m.Called(ctx, announcementsId)

	var r0 announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) announcements.Domain); ok {
		r0 = rf(ctx, announcementsId)
	} else {
		r0 = ret.Get(0).(announcements.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, announcementsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, announcementsDomain
func (_m *Repository) Store(ctx context.Context, announcementsDomain *announcements.Domain) (announcements.Domain, error) {
	ret := _m.Called(ctx, announcementsDomain)

	var r0 announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *announcements.Domain) announcements.Domain); ok {
		r0 = rf(ctx, announcementsDomain)
	} else {
		r0 = ret.Get(0).(announcements.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *announcements.Domain) error); ok {
		r1 = rf(ctx, announcementsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, announcementsDomain
func (_m *Repository) Update(ctx context.Context, announcementsDomain *announcements.Domain) (announcements.Domain, error) {
	ret := _m.Called(ctx, announcementsDomain)

	var r0 announcements.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *announcements.Domain) announcements.Domain); ok {
		r0 = rf(ctx, announcementsDomain)
	} else {
		r0 = ret.Get(0).(announcements.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *announcements.Domain) error); ok {
		r1 = rf(ctx, announcementsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
