// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	likeReplies "infion-BE/businesses/likeReplies"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountByReplyID provides a mock function with given fields: ctx, id
func (_m *Repository) CountByReplyID(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, likeRepliesDomain
func (_m *Repository) Delete(ctx context.Context, likeRepliesDomain *likeReplies.Domain) (likeReplies.Domain, error) {
	ret := _m.Called(ctx, likeRepliesDomain)

	var r0 likeReplies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeReplies.Domain) likeReplies.Domain); ok {
		r0 = rf(ctx, likeRepliesDomain)
	} else {
		r0 = ret.Get(0).(likeReplies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeReplies.Domain) error); ok {
		r1 = rf(ctx, likeRepliesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, likeRepliesId
func (_m *Repository) GetByID(ctx context.Context, likeRepliesId int) (likeReplies.Domain, error) {
	ret := _m.Called(ctx, likeRepliesId)

	var r0 likeReplies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) likeReplies.Domain); ok {
		r0 = rf(ctx, likeRepliesId)
	} else {
		r0 = ret.Get(0).(likeReplies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, likeRepliesId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDuplicate provides a mock function with given fields: ctx, replyID, userID
func (_m *Repository) GetDuplicate(ctx context.Context, replyID int, userID int) (likeReplies.Domain, error) {
	ret := _m.Called(ctx, replyID, userID)

	var r0 likeReplies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) likeReplies.Domain); ok {
		r0 = rf(ctx, replyID, userID)
	} else {
		r0 = ret.Get(0).(likeReplies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, replyID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, likeRepliesDomain
func (_m *Repository) Store(ctx context.Context, likeRepliesDomain *likeReplies.Domain) (likeReplies.Domain, error) {
	ret := _m.Called(ctx, likeRepliesDomain)

	var r0 likeReplies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeReplies.Domain) likeReplies.Domain); ok {
		r0 = rf(ctx, likeRepliesDomain)
	} else {
		r0 = ret.Get(0).(likeReplies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeReplies.Domain) error); ok {
		r1 = rf(ctx, likeRepliesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, likeRepliesDomain
func (_m *Repository) Update(ctx context.Context, likeRepliesDomain *likeReplies.Domain) (likeReplies.Domain, error) {
	ret := _m.Called(ctx, likeRepliesDomain)

	var r0 likeReplies.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeReplies.Domain) likeReplies.Domain); ok {
		r0 = rf(ctx, likeRepliesDomain)
	} else {
		r0 = ret.Get(0).(likeReplies.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeReplies.Domain) error); ok {
		r1 = rf(ctx, likeRepliesDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
