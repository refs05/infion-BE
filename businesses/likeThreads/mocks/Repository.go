// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	likeThreads "infion-BE/businesses/likeThreads"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountByThreadID provides a mock function with given fields: ctx, id
func (_m *Repository) CountByThreadID(ctx context.Context, id int) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, likeThreadsDomain
func (_m *Repository) Delete(ctx context.Context, likeThreadsDomain *likeThreads.Domain) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, likeThreadsDomain)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeThreads.Domain) likeThreads.Domain); ok {
		r0 = rf(ctx, likeThreadsDomain)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeThreads.Domain) error); ok {
		r1 = rf(ctx, likeThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, likeThreadsId
func (_m *Repository) GetByID(ctx context.Context, likeThreadsId int) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, likeThreadsId)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) likeThreads.Domain); ok {
		r0 = rf(ctx, likeThreadsId)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, likeThreadsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDuplicate provides a mock function with given fields: ctx, threadID, userID
func (_m *Repository) GetDuplicate(ctx context.Context, threadID int, userID int) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, threadID, userID)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) likeThreads.Domain); ok {
		r0 = rf(ctx, threadID, userID)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, threadID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLikeThreadsByThreadID provides a mock function with given fields: ctx, threadID
func (_m *Repository) GetLikeThreadsByThreadID(ctx context.Context, threadID int) ([]likeThreads.Domain, error) {
	ret := _m.Called(ctx, threadID)

	var r0 []likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []likeThreads.Domain); ok {
		r0 = rf(ctx, threadID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]likeThreads.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: ctx, threadID, userID
func (_m *Repository) GetStatus(ctx context.Context, threadID int, userID int) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, threadID, userID)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int, int) likeThreads.Domain); ok {
		r0 = rf(ctx, threadID, userID)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, threadID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, likeThreadsDomain
func (_m *Repository) Store(ctx context.Context, likeThreadsDomain *likeThreads.Domain) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, likeThreadsDomain)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeThreads.Domain) likeThreads.Domain); ok {
		r0 = rf(ctx, likeThreadsDomain)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeThreads.Domain) error); ok {
		r1 = rf(ctx, likeThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, likeThreadsDomain
func (_m *Repository) Update(ctx context.Context, likeThreadsDomain *likeThreads.Domain) (likeThreads.Domain, error) {
	ret := _m.Called(ctx, likeThreadsDomain)

	var r0 likeThreads.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *likeThreads.Domain) likeThreads.Domain); ok {
		r0 = rf(ctx, likeThreadsDomain)
	} else {
		r0 = ret.Get(0).(likeThreads.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *likeThreads.Domain) error); ok {
		r1 = rf(ctx, likeThreadsDomain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
